import os
import shutil
import subprocess
import tempfile
import logging

from django.db import models

logger = logging.getLogger("django")


def video_file_path(video, filename):
    return f"video/{video.id}/{filename}"


def video_frame_png_path(frame, filename):
    return f"video/{frame.video.id}/frame/{filename}"


class Video(models.Model):
    created = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now=True)

    file = models.FileField(
        upload_to=video_file_path,
        blank=True,
        help_text="Generated from compiling frames",
    )
    file_framerate = models.PositiveIntegerField(blank=True, null=True)

    def generate_video(self, framerate: int):
        """
        Generates the video using the png frames.

        Ffmpeg documentation:

        Images to video: <https://trac.ffmpeg.org/wiki/Slideshow>
        Webm encoding: <https://trac.ffmpeg.org/wiki/Encode/VP9>
        """
        if self.file and self.file_framerate == framerate:
            return
        if self.frames.exists():
            dir_obj = tempfile.TemporaryDirectory(prefix="infographics-")
            dir = dir_obj.name
            self.generate_frames_indexes()
            for frame in self.frames.order_by("index").exclude(png="").exclude(index__isnull=True):
                istr = f"{frame.index:06d}"
                shutil.copy(frame.png.path, os.path.join(dir, f"{istr}.png"))
            input = os.path.join(dir, "%06d.png")
            output = os.path.join(dir, "output.webm")
            logger.info(f"[{self.id}] generating...")
            subprocess.run(
                [
                    "ffmpeg",
                    "-framerate",
                    str(framerate),
                    "-i",
                    input,
                    "-cpu-used",
                    "7", # 8 is only marginally faster but produces bigger files
                    "-deadline",
                    "realtime",
                    "-vf",
                    "fps=30",
                    output,
                ],
                check=True,
                capture_output=True,
            )
            logger.info(f"[{self.id}] generated file")
            self.file_framerate = framerate
            with open(output, "rb") as f:
                self.file.save(f"video-{self.id}.webm", f)

    def generate_frames_indexes(self):
        i = 0
        frames = []
        for frame in self.frames.order_by("ordering").iterator():
            frame.index = i
            frames.append(frame)
            i += 1
        VideoFrame.objects.bulk_update(frames, ["index"])


class VideoFrameManager(models.Manager):
    def create_from_svg(self, svg_content, *args, **kwargs):
        """
        Creates a VideoFrame converting the svg content to a png.

        # Raises

        - `subprocess.CalledProcessError` if conversion fails.
        """
        frame = VideoFrame(*args, **kwargs)
        dir = tempfile.TemporaryDirectory(prefix="infographics-")
        svg_path = os.path.join(dir.name, "frame.svg")
        png_path = os.path.join(dir.name, "frame.png")
        with open(svg_path, "w") as f:
            f.write(svg_content)
        subprocess.run(
            [
                "rsvg-convert",
                svg_path,
                "-o",
                png_path,
                "--background-color",
                "white",
            ],
            check=True,
            capture_output=True,
        )
        with open(png_path, "rb") as f:
            frame.png.save("frame.png", f)


class VideoFrame(models.Model):
    created = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now=True)

    video = models.ForeignKey(Video, on_delete=models.CASCADE, related_name="frames")
    ordering = models.FloatField(help_text="Ordering from the front end")

    index = models.PositiveIntegerField(
        blank=True,
        null=True,
        help_text="Generated by back end after receiving all frames",
    )
    png = models.FileField(
        upload_to=video_frame_png_path,
        blank=True,
        help_text="Generated from svg",
    )

    objects = VideoFrameManager()
