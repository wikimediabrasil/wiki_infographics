import os
import shutil
import subprocess
import tempfile
import logging

from django.db import models

logger = logging.getLogger("django")


def video_file_path(video, filename):
    return f"video/{video.id}/{filename}"

def video_frame_png_path(frame, filename):
    return f"video/{frame.video.id}/frame/{frame.id}/{filename}"

class Video(models.Model):
    created = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now=True)

    file = models.FileField(
        upload_to=video_file_path,
        blank=True,
        help_text="Generated from compiling frames",
    )

    def generate_video(self):
        self.generate_frames_indexes()
        if self.frames.exists():
            dir_obj = tempfile.TemporaryDirectory(prefix="infographics-")
            dir = dir_obj.name
            for frame in self.frames.order_by("index"):
                frame.generate_png()
                istr = f"{frame.index:06d}"
                shutil.copy(frame.png.path, os.path.join(dir, f"{istr}.png"))
            input = os.path.join(dir, "%06d.png")
            output = os.path.join(dir, "output.webm")
            subprocess.run(["ffmpeg", "-i", input, output])
            logger.info(f"[{self.id}] generated file")
            with open(output, "rb") as f:
                self.file.save(f"video-{self.id}.webm", f)

    def generate_frames_indexes(self):
        i = 0
        frames = []
        for frame in self.frames.order_by("ordering").iterator():
            frame.index = i
            frames.append(frame)
            i += 1
        VideoFrame.objects.bulk_update(frames, ["index"])

    def png_complete_ratio(self):
        with_png = self.frames.exclude(png="").count()
        total = self.frames.all().count()
        return with_png / total if total > 0 else 0




class VideoFrame(models.Model):
    created = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now=True)

    video = models.ForeignKey(Video, on_delete=models.CASCADE, related_name="frames")
    ordering = models.FloatField(help_text="Ordering from the front end")
    svg_content = models.TextField(blank=True)

    index = models.PositiveIntegerField(
        blank=True,
        null=True,
        help_text="Generated by back end after receiving all frames",
    )
    png = models.FileField(
        upload_to=video_frame_png_path,
        blank=True,
        help_text="Generated from svg",
    )

    def generate_png(self):
        if not self.png:
            dir = tempfile.TemporaryDirectory(prefix="infographics-")
            svg_path = os.path.join(dir.name, "frame.svg")
            png_path = os.path.join(dir.name, "frame.png")
            with open(svg_path, "w") as f:
                f.write(self.svg_content)
            subprocess.run(["magick", svg_path, png_path])
            with open(png_path, "rb") as f:
                self.png.save(f"frame-{self.id}.png", f)
